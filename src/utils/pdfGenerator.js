import jsPDF from 'jspdf';
import { formatCurrency, getCurrencyName, getCheapestProvider } from './pricingCalculator';
import { formatCustomerName, formatCustomerContact, formatReportAttribution } from './nameFormatter';
import { generateCostReportFileName, generateProviderReportFileName, generateInvoiceFileName } from './fileNameGenerator';

// Company/App branding
const BRANDING = {
  name: 'CloudBucks',
  tagline: 'Cloud Cost Comparison Platform',
  website: 'cloudbucks.app',
  email: 'support@cloudbucks.app'
};

// Provider configurations for branding
const PROVIDER_INFO = {
  aws: { name: 'Amazon Web Services (AWS)', color: [255, 152, 0] },
  azure: { name: 'Microsoft Azure', color: [0, 120, 215] },
  gcp: { name: 'Google Cloud Platform (GCP)', color: [66, 133, 244] }
};

// SLA tier mappings for display (updated for realistic cloud provider offerings)
const SLA_TIERS = {
  '99.5': 'Basic (99.5%)',
  '99.9': 'Standard (99.9%)',
  '99.95': 'Premium (99.95%)',
  '99.99': 'Enterprise (99.99%)'
};

const SUPPORT_LEVELS = {
  basic: 'Basic Support',
  developer: 'Developer Support',
  business: 'Business Support',
  enterprise: 'Enterprise Support'
};

// Page management constants
const PAGE_MARGIN_TOP = 35;
const PAGE_MARGIN_BOTTOM = 25;
const PAGE_HEIGHT = 297; // A4 height in mm
const MAX_Y_POSITION = PAGE_HEIGHT - PAGE_MARGIN_BOTTOM;

// Utility function to check if we need a new page
const checkPageBreak = (doc, yPosition, neededSpace = 20) => {
  if (yPosition + neededSpace > MAX_Y_POSITION) {
    doc.addPage();
    return PAGE_MARGIN_TOP;
  }
  return yPosition;
};

// Utility function to add header to PDF
const addHeader = (doc, title, subtitle = '') => {
  // Header background
  doc.setFillColor(59, 130, 246); // Primary blue
  doc.rect(0, 0, 210, 25, 'F');
  
  // Logo/Brand name
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text(BRANDING.name, 20, 16);
  
  // Title
  doc.setFontSize(14);
  doc.setFont('helvetica', 'normal');
  doc.text(title, 140, 12);
  
  if (subtitle) {
    doc.setFontSize(10);
    doc.text(subtitle, 140, 18);
  }
  
  // Reset colors
  doc.setTextColor(0, 0, 0);
};

// Utility function to add footer to PDF
const addFooter = (doc, pageNumber = 1) => {
  const pageHeight = doc.internal.pageSize.height;
  
  // Footer line
  doc.setDrawColor(200, 200, 200);
  doc.line(20, pageHeight - 25, 190, pageHeight - 25);
  
  // Footer text
  doc.setFontSize(8);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated by ${BRANDING.name} | ${BRANDING.website}`, 20, pageHeight - 18);
  doc.text(`Page ${pageNumber}`, 180, pageHeight - 18);
  doc.text(`Generated on ${new Date().toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })}`, 20, pageHeight - 12);
  
  // Reset colors
  doc.setTextColor(0, 0, 0);
};

// Function to add service configuration details
const addServiceConfiguration = (doc, services, selectedPlan, yPosition) => {
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Service Configuration', 20, yPosition);
  yPosition += 15;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  // Plan Information
  yPosition = checkPageBreak(doc, yPosition, 25);
  doc.text('Selected Plan:', 20, yPosition);
  yPosition += 6;
  doc.text(`  • Plan: ${selectedPlan?.name || 'Basic Plan'}`, 25, yPosition);
  yPosition += 5;
  doc.text(`  • Description: ${selectedPlan?.description || 'Default plan'}`, 25, yPosition);
  if (selectedPlan?.discount > 0) {
    yPosition += 5;
    doc.text(`  • Discount: ${selectedPlan.discount}% off all services`, 25, yPosition);
  }
  yPosition += 10;
  
  // Check page break before each section
  yPosition = checkPageBreak(doc, yPosition, 30);
  
  // Compute
  doc.text('Compute Instances:', 20, yPosition);
  yPosition += 6;
  doc.text(`  • Instance Type: ${services.compute.type}`, 25, yPosition);
  yPosition += 5;
  doc.text(`  • Number of Instances: ${services.compute.instances}`, 25, yPosition);
  yPosition += 5;
  doc.text(`  • Hours per Month: ${services.compute.hours}`, 25, yPosition);
  yPosition += 5;
  doc.text(`  • Region: ${services.compute.region}`, 25, yPosition);
  yPosition += 10;
  
  yPosition = checkPageBreak(doc, yPosition, 25);
  
  // Storage
  doc.text('Storage:', 20, yPosition);
  yPosition += 6;
  doc.text(`  • Type: ${services.storage.type.toUpperCase()}`, 25, yPosition);
  yPosition += 5;
  doc.text(`  • Amount: ${services.storage.amount} GB`, 25, yPosition);
  yPosition += 10;
  
  yPosition = checkPageBreak(doc, yPosition, 20);
  
  // Bandwidth
  doc.text('Bandwidth:', 20, yPosition);
  yPosition += 6;
  doc.text(`  • Monthly Transfer: ${services.bandwidth.amount} GB`, 25, yPosition);
  yPosition += 10;
  
  yPosition = checkPageBreak(doc, yPosition, 25);
  
  // Database
  doc.text('Database:', 20, yPosition);
  yPosition += 6;
  doc.text(`  • Type: ${services.database.type.toUpperCase()}`, 25, yPosition);
  yPosition += 5;
  doc.text(`  • Instances: ${services.database.instances}`, 25, yPosition);
  yPosition += 5;
  doc.text(`  • Storage: ${services.database.storage} GB`, 25, yPosition);
  yPosition += 10;
  
  yPosition = checkPageBreak(doc, yPosition, 20);
  
  // Disaster Recovery
  doc.text('Disaster Recovery:', 20, yPosition);
  yPosition += 6;
  doc.text(`  • Enabled: ${services.disasterRecovery.enabled ? 'Yes' : 'No'}`, 25, yPosition);
  if (services.disasterRecovery.enabled) {
    yPosition += 5;
    doc.text(`  • Backup Frequency: ${services.disasterRecovery.backupFrequency}`, 25, yPosition);
  }
  yPosition += 10;
  
  yPosition = checkPageBreak(doc, yPosition, 20);
  
  // SLA & Support
  doc.text('SLA & Support:', 20, yPosition);
  yPosition += 6;
  doc.text(`  • Uptime Requirement: ${SLA_TIERS[services.sla.uptime] || services.sla.uptime + '%'}`, 25, yPosition);
  yPosition += 5;
  doc.text(`  • Support Level: ${SUPPORT_LEVELS[services.sla.supportLevel] || services.sla.supportLevel}`, 25, yPosition);
  yPosition += 15;
  
  return yPosition;
};

// Generate Cost Comparison Report
export const generateCostReport = (services, estimates, selectedTimeframe, selectedCurrency, exchangeRate, selectedPlan = null, user = null) => {
  const doc = new jsPDF();
  let yPosition = PAGE_MARGIN_TOP;
  
  // Add header
  addHeader(doc, 'Cloud Cost Comparison Report', `${selectedTimeframe.toUpperCase()} | ${selectedCurrency}`);
  
  // Report summary section
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Executive Summary', 20, yPosition);
  yPosition += 15;
  
  const cheapest = getCheapestProvider(estimates);
  const totalRange = {
    min: Math.min(...Object.values(estimates).map(e => e.total)),
    max: Math.max(...Object.values(estimates).map(e => e.total))
  };
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Report generated for ${selectedTimeframe} cloud cost comparison`, 20, yPosition);
  yPosition += 6;
  
  // Add user information if available
  if (user) {
    const attribution = formatReportAttribution(user);
    const contact = formatCustomerContact(user);
    
    doc.text(attribution, 20, yPosition);
    yPosition += 6;
    
    if (contact.company) {
      doc.text(`Organization: ${contact.company}`, 20, yPosition);
      yPosition += 6;
    }
    
    doc.text(`Customer ID: ${contact.id}`, 20, yPosition);
    yPosition += 6;
  }
  
  doc.text(`Currency: ${getCurrencyName(selectedCurrency)} (${selectedCurrency})`, 20, yPosition);
  yPosition += 6;
  if (selectedPlan && selectedPlan.discount > 0) {
    doc.text(`Plan: ${selectedPlan.name} (${selectedPlan.discount}% discount applied)`, 20, yPosition);
    yPosition += 6;
  }
  doc.text(`Best Value Provider: ${PROVIDER_INFO[cheapest.provider].name}`, 20, yPosition);
  yPosition += 6;
  doc.text(`Cost Range: ${formatCurrency(totalRange.min, selectedCurrency)} - ${formatCurrency(totalRange.max, selectedCurrency)}`, 20, yPosition);
  yPosition += 6;
  doc.text(`Potential Savings: ${formatCurrency(totalRange.max - totalRange.min, selectedCurrency)}`, 20, yPosition);
  yPosition += 20;
  
  // Service Configuration section
  yPosition = checkPageBreak(doc, yPosition, 40);
  yPosition = addServiceConfiguration(doc, services, selectedPlan, yPosition);
  
  // Cost Breakdown section
  yPosition = checkPageBreak(doc, yPosition, 40);
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Cost Breakdown by Provider', 20, yPosition);
  yPosition += 15;
  
  Object.entries(estimates).forEach(([provider, costs]) => {
    yPosition = checkPageBreak(doc, yPosition, 50);
    
    const providerInfo = PROVIDER_INFO[provider];
    const isCheapest = provider === cheapest.provider;
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(...providerInfo.color);
    doc.text(`${providerInfo.name}`, 20, yPosition);
    
    if (isCheapest) {
      doc.setTextColor(34, 197, 94); // Green for best value
      doc.text(' (BEST VALUE)', 80, yPosition);
    }
    
    yPosition += 10;
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(0, 0, 0);
    
    doc.text(`Compute: ${formatCurrency(costs.compute, selectedCurrency)}`, 25, yPosition);
    yPosition += 5;
    doc.text(`Storage: ${formatCurrency(costs.storage, selectedCurrency)}`, 25, yPosition);
    yPosition += 5;
    doc.text(`Bandwidth: ${formatCurrency(costs.bandwidth, selectedCurrency)}`, 25, yPosition);
    yPosition += 5;
    doc.text(`Database: ${formatCurrency(costs.database, selectedCurrency)}`, 25, yPosition);
    yPosition += 5;
    doc.text(`Disaster Recovery: ${formatCurrency(costs.disasterRecovery, selectedCurrency)}`, 25, yPosition);
    yPosition += 5;
    doc.text(`SLA & Support: ${formatCurrency(costs.sla, selectedCurrency)}`, 25, yPosition);
    yPosition += 6;
    
    doc.setFont('helvetica', 'bold');
    doc.text(`TOTAL: ${formatCurrency(costs.total, selectedCurrency)}`, 25, yPosition);
    yPosition += 15;
  });
  
  // Plan and exchange rate info
  if (selectedPlan && selectedPlan.discount > 0) {
    yPosition = checkPageBreak(doc, yPosition, 15);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'italic');
    doc.setTextColor(100, 100, 100);
    doc.text(`Plan Discount: ${selectedPlan.discount}% discount has been applied to all costs above`, 20, yPosition);
    yPosition += 5;
  }
  
  if (selectedCurrency === 'INR') {
    yPosition = checkPageBreak(doc, yPosition, 15);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'italic');
    doc.setTextColor(100, 100, 100);
    doc.text(`Exchange Rate: 1 USD = ₹${exchangeRate} (approximate)`, 20, yPosition);
  }
  
  // Add footer to all pages
  const totalPages = doc.internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    addFooter(doc, i);
  }
  
  // Save the PDF with customer-specific name
  const fileName = generateCostReportFileName(user, selectedTimeframe, selectedCurrency);
  doc.save(fileName);
};

// Generate Individual Provider Report
export const generateProviderReport = (services, estimates, selectedProvider, selectedTimeframe, selectedCurrency, exchangeRate, selectedPlan = null, user = null) => {
  const doc = new jsPDF();
  let yPosition = PAGE_MARGIN_TOP;
  
  const providerInfo = PROVIDER_INFO[selectedProvider];
  const providerCosts = estimates[selectedProvider];
  
  // Add header
  addHeader(doc, `${providerInfo.name} Cost Report`, `${selectedTimeframe.toUpperCase()} | ${selectedCurrency}`);
  
  // Report summary section
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(...providerInfo.color);
  doc.text(`${providerInfo.name} Cost Analysis`, 20, yPosition);
  doc.setTextColor(0, 0, 0);
  yPosition += 15;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Individual provider report for ${selectedTimeframe} costs`, 20, yPosition);
  yPosition += 6;
  
  // Add user information if available
  if (user) {
    const attribution = formatReportAttribution(user);
    const contact = formatCustomerContact(user);
    
    doc.text(attribution, 20, yPosition);
    yPosition += 6;
    
    if (contact.company) {
      doc.text(`Organization: ${contact.company}`, 20, yPosition);
      yPosition += 6;
    }
    
    doc.text(`Customer ID: ${contact.id}`, 20, yPosition);
    yPosition += 6;
  }
  
  doc.text(`Currency: ${getCurrencyName(selectedCurrency)} (${selectedCurrency})`, 20, yPosition);
  yPosition += 6;
  if (selectedPlan && selectedPlan.discount > 0) {
    doc.text(`Plan: ${selectedPlan.name} (${selectedPlan.discount}% discount applied)`, 20, yPosition);
    yPosition += 6;
  }
  doc.text(`Total Estimated Cost: ${formatCurrency(providerCosts.total, selectedCurrency)}`, 20, yPosition);
  yPosition += 20;
  
  // Service Configuration section
  yPosition = checkPageBreak(doc, yPosition, 40);
  yPosition = addServiceConfiguration(doc, services, selectedPlan, yPosition);
  
  // Detailed Cost Breakdown
  yPosition = checkPageBreak(doc, yPosition, 40);
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Detailed Cost Breakdown', 20, yPosition);
  yPosition += 15;
  
  // Service costs with descriptions
  const serviceDetails = [
    { 
      name: 'Compute Instances', 
      cost: providerCosts.compute,
      description: `${services.compute.instances}x ${services.compute.type} running ${services.compute.hours} hours/month`
    },
    { 
      name: 'Storage', 
      cost: providerCosts.storage,
      description: `${services.storage.amount} GB of ${services.storage.type.toUpperCase()} storage`
    },
    { 
      name: 'Bandwidth', 
      cost: providerCosts.bandwidth,
      description: `${services.bandwidth.amount} GB monthly data transfer`
    },
    { 
      name: 'Database', 
      cost: providerCosts.database,
      description: `${services.database.instances}x ${services.database.type} with ${services.database.storage} GB storage`
    },
    { 
      name: 'Disaster Recovery', 
      cost: providerCosts.disasterRecovery,
      description: services.disasterRecovery.enabled ? `Backup and DR with ${services.disasterRecovery.backupFrequency} frequency` : 'Disaster recovery not enabled'
    },
    { 
      name: 'SLA & Support', 
      cost: providerCosts.sla,
      description: `${SLA_TIERS[services.sla.uptime]} uptime with ${SUPPORT_LEVELS[services.sla.supportLevel]}`
    }
  ];
  
  serviceDetails.forEach((service) => {
    yPosition = checkPageBreak(doc, yPosition, 25);
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'bold');
    doc.text(`${service.name}:`, 20, yPosition);
    doc.text(`${formatCurrency(service.cost, selectedCurrency)}`, 150, yPosition);
    yPosition += 6;
    
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(100, 100, 100);
    const wrappedText = doc.splitTextToSize(service.description, 160);
    doc.text(wrappedText, 25, yPosition);
    yPosition += wrappedText.length * 4 + 8;
    doc.setTextColor(0, 0, 0);
  });
  
  // Total cost summary
  yPosition = checkPageBreak(doc, yPosition, 30);
  doc.setDrawColor(200, 200, 200);
  doc.line(20, yPosition, 190, yPosition);
  yPosition += 10;
  
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Total Estimated Cost:', 20, yPosition);
  doc.text(`${formatCurrency(providerCosts.total, selectedCurrency)}`, 130, yPosition);
  yPosition += 8;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Per ${selectedTimeframe === 'monthly' ? 'month' : 'year'}`, 20, yPosition);
  yPosition += 10;
  
  // Plan and exchange rate info
  if (selectedPlan && selectedPlan.discount > 0) {
    yPosition = checkPageBreak(doc, yPosition, 15);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'italic');
    doc.setTextColor(100, 100, 100);
    doc.text(`Plan Discount: ${selectedPlan.discount}% discount has been applied to costs above`, 20, yPosition);
    yPosition += 5;
  }
  
  if (selectedCurrency === 'INR') {
    yPosition = checkPageBreak(doc, yPosition, 15);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'italic');
    doc.setTextColor(100, 100, 100);
    doc.text(`Exchange Rate: 1 USD = ₹${exchangeRate} (approximate)`, 20, yPosition);
  }
  
  // Add footer to all pages
  const totalPages = doc.internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    addFooter(doc, i);
  }
  
  // Save the PDF with customer-specific name
  const fileName = generateProviderReportFileName(user, selectedProvider, selectedTimeframe, selectedCurrency);
  doc.save(fileName);
};

// Generate Invoice for selected provider
export const generateInvoice = (services, estimates, selectedProvider, selectedTimeframe, selectedCurrency, exchangeRate, selectedPlan = null, user = null) => {
  const doc = new jsPDF();
  let yPosition = PAGE_MARGIN_TOP;
  
  const providerInfo = PROVIDER_INFO[selectedProvider];
  const providerCosts = estimates[selectedProvider];
  
  // Add header
  addHeader(doc, 'Cloud Services Invoice', `Estimate for ${providerInfo.name}`);
  
  // Invoice header info (right side)
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('INVOICE', 160, yPosition);
  yPosition += 8;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Invoice #: CB-${Date.now().toString().slice(-8)}`, 160, yPosition);
  yPosition += 5;
  doc.text(`Date: ${new Date().toLocaleDateString()}`, 160, yPosition);
  yPosition += 5;
  doc.text(`Period: ${selectedTimeframe.charAt(0).toUpperCase() + selectedTimeframe.slice(1)}`, 160, yPosition);
  yPosition += 5;
  doc.text(`Currency: ${selectedCurrency}`, 160, yPosition);
  if (selectedPlan && selectedPlan.discount > 0) {
    yPosition += 5;
    doc.text(`Plan: ${selectedPlan.name} (${selectedPlan.discount}% off)`, 160, yPosition);
  }
  yPosition += 15;
  
  // Provider info section
  yPosition = checkPageBreak(doc, yPosition, 25);
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(...providerInfo.color);
  doc.text('SERVICE PROVIDER:', 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(0, 0, 0);
  doc.text(providerInfo.name, 20, yPosition);
  yPosition += 5;
  doc.text('Cloud Computing Services', 20, yPosition);
  yPosition += 15;
  
  // Bill to section
  yPosition = checkPageBreak(doc, yPosition, 25);
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('ESTIMATED FOR:', 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  if (user) {
    const contact = formatCustomerContact(user);
    const nameInfo = formatCustomerName(user);
    
    // Customer name (properly formatted)
    doc.setFont('helvetica', 'bold');
    doc.text(nameInfo.display, 20, yPosition);
    yPosition += 5;
    
    // Email address
    doc.setFont('helvetica', 'normal');
    doc.text(contact.email, 20, yPosition);
    yPosition += 5;
    
    // Company (if available)
    if (contact.company) {
      doc.text(contact.company, 20, yPosition);
      yPosition += 5;
    }
    
    // Customer ID
    doc.setFontSize(9);
    doc.setTextColor(100, 100, 100);
    doc.text(`Customer ID: ${contact.id}`, 20, yPosition);
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    yPosition += 5;
  } else {
    doc.text('Customer Organization', 20, yPosition);
    yPosition += 5;
  }
  
  doc.text('Cloud Infrastructure Project', 20, yPosition);
  if (selectedPlan) {
    yPosition += 5;
    doc.text(`Service Plan: ${selectedPlan.name}`, 20, yPosition);
  }
  yPosition += 20;
  
  // Service details table
  yPosition = checkPageBreak(doc, yPosition, 80); // Reserve more space for table
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('SERVICE DETAILS', 20, yPosition);
  yPosition += 15;
  
  // Table header
  yPosition = checkPageBreak(doc, yPosition, 50); // Ensure table header fits
  doc.setFillColor(240, 240, 240);
  doc.rect(20, yPosition - 5, 170, 8, 'F');
  
  doc.setFontSize(9);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0);
  doc.text('Service', 25, yPosition);
  doc.text('Description', 70, yPosition);
  doc.text('Amount', 160, yPosition);
  yPosition += 15;
  
  // Service rows
  doc.setFont('helvetica', 'normal');
  
  const serviceDetails = [
    {
      name: 'Compute Instances',
      description: `${services.compute.instances}x ${services.compute.type} (${services.compute.hours}h)`,
      amount: providerCosts.compute
    },
    {
      name: 'Storage',
      description: `${services.storage.amount} GB ${services.storage.type.toUpperCase()}`,
      amount: providerCosts.storage
    },
    {
      name: 'Bandwidth',
      description: `${services.bandwidth.amount} GB data transfer`,
      amount: providerCosts.bandwidth
    },
    {
      name: 'Database',
      description: `${services.database.instances}x ${services.database.type} (${services.database.storage} GB)`,
      amount: providerCosts.database
    }
  ];
  
  if (services.disasterRecovery.enabled) {
    serviceDetails.push({
      name: 'Disaster Recovery',
      description: `Backup & DR (${services.disasterRecovery.backupFrequency})`,
      amount: providerCosts.disasterRecovery
    });
  }
  
  serviceDetails.push({
    name: 'SLA & Support',
    description: `${SLA_TIERS[services.sla.uptime]} + ${SUPPORT_LEVELS[services.sla.supportLevel]}`,
    amount: providerCosts.sla
  });
  
  // Render each service row with proper spacing
  serviceDetails.forEach((service, index) => {
    yPosition = checkPageBreak(doc, yPosition, 12); // Check before each row
    
    // Alternate row background
    if (index % 2 === 1) {
      doc.setFillColor(250, 250, 250);
      doc.rect(20, yPosition - 4, 170, 10, 'F');
    }
    
    // Service name
    doc.setFontSize(9);
    doc.setTextColor(0, 0, 0);
    doc.text(service.name, 25, yPosition);
    
    // Description with text wrapping
    const descriptionLines = doc.splitTextToSize(service.description, 85);
    doc.text(descriptionLines, 70, yPosition);
    
    // Amount
    doc.text(formatCurrency(service.amount, selectedCurrency), 160, yPosition);
    
    // Calculate actual row height based on description lines
    const rowHeight = Math.max(10, descriptionLines.length * 4 + 2);
    yPosition += rowHeight;
  });
  
  // Total section
  yPosition = checkPageBreak(doc, yPosition, 40);
  yPosition += 15;
  
  // Total line
  doc.setDrawColor(200, 200, 200);
  doc.line(120, yPosition, 190, yPosition);
  yPosition += 15;
  
  // Total amount - use two lines to prevent overlap
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0);
  doc.text('TOTAL ESTIMATED COST:', 120, yPosition);
  yPosition += 8;
  
  // Amount on separate line, right-aligned
  doc.setFontSize(14);
  doc.setTextColor(59, 130, 246); // Primary blue color
  doc.text(formatCurrency(providerCosts.total, selectedCurrency), 170, yPosition);
  yPosition += 20;
  
  // Notes section
  yPosition = checkPageBreak(doc, yPosition, 40);
  doc.setFontSize(9);
  doc.setFont('helvetica', 'italic');
  doc.setTextColor(100, 100, 100);
  
  // Wrap disclaimer text properly
  const disclaimerText = `* This is a ${selectedTimeframe} cost estimate based on specified configuration`;
  const wrappedDisclaimer = doc.splitTextToSize(disclaimerText, 170);
  doc.text(wrappedDisclaimer, 20, yPosition);
  yPosition += wrappedDisclaimer.length * 4 + 5;
  
  if (selectedPlan && selectedPlan.discount > 0) {
    yPosition = checkPageBreak(doc, yPosition, 10);
    const planText = `* ${selectedPlan.discount}% ${selectedPlan.name} discount has been applied to all costs`;
    const wrappedPlan = doc.splitTextToSize(planText, 170);
    doc.text(wrappedPlan, 20, yPosition);
    yPosition += wrappedPlan.length * 4 + 5;
  }
  
  if (selectedCurrency === 'INR') {
    yPosition = checkPageBreak(doc, yPosition, 10);
    const exchangeText = `* Exchange Rate: 1 USD = ₹${exchangeRate} (approximate)`;
    const wrappedExchange = doc.splitTextToSize(exchangeText, 170);
    doc.text(wrappedExchange, 20, yPosition);
    yPosition += wrappedExchange.length * 4 + 5;
  }
  
  yPosition = checkPageBreak(doc, yPosition, 15);
  doc.setTextColor(0, 0, 0);
  doc.setFont('helvetica', 'normal');
  const finalText = 'This invoice is for estimation purposes only and does not constitute a binding agreement.';
  const wrappedFinal = doc.splitTextToSize(finalText, 170);
  doc.text(wrappedFinal, 20, yPosition);
  
  // Add footer to all pages
  const totalPages = doc.internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    addFooter(doc, i);
  }
  
  // Save the PDF with customer-specific name
  const fileName = generateInvoiceFileName(user, selectedProvider, selectedTimeframe, selectedCurrency);
  doc.save(fileName);
}; 