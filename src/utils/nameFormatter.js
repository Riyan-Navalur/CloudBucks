/**
 * Utility functions for formatting customer names in professional documents
 */

/**
 * Capitalizes the first letter of each word and lowercases the rest
 * @param {string} str - The string to format
 * @returns {string} - Properly capitalized string
 */
const toTitleCase = (str) => {
  if (!str || typeof str !== 'string') return '';
  
  return str
    .toLowerCase()
    .split(' ')
    .map(word => {
      if (word.length === 0) return word;
      return word.charAt(0).toUpperCase() + word.slice(1);
    })
    .join(' ')
    .trim();
};

/**
 * Formats a customer's name for professional documents
 * @param {Object} user - The user object from Supabase
 * @returns {Object} - Formatted name object with different variations
 */
export const formatCustomerName = (user) => {
  if (!user) {
    return {
      full: 'Customer',
      first: '',
      last: '',
      initials: '',
      display: 'Customer',
      professional: 'Customer'
    };
  }

  const metadata = user.user_metadata || {};
  let firstName = '';
  let lastName = '';
  let fullName = '';

  // Extract name components
  if (metadata.first_name && metadata.last_name) {
    firstName = toTitleCase(metadata.first_name.trim());
    lastName = toTitleCase(metadata.last_name.trim());
    fullName = `${firstName} ${lastName}`;
  } else if (metadata.full_name) {
    fullName = toTitleCase(metadata.full_name.trim());
    const nameParts = fullName.split(' ').filter(part => part.length > 0);
    if (nameParts.length >= 2) {
      firstName = nameParts[0];
      lastName = nameParts.slice(1).join(' ');
    } else if (nameParts.length === 1) {
      firstName = nameParts[0];
      lastName = '';
    }
  } else if (user.email) {
    // Fallback to email username, formatted nicely
    const emailUsername = user.email.split('@')[0];
    const cleanedUsername = emailUsername
      .replace(/[._-]/g, ' ')
      .split(' ')
      .filter(part => part.length > 0)
      .map(part => toTitleCase(part))
      .join(' ');
    
    fullName = cleanedUsername || 'Customer';
    const parts = fullName.split(' ');
    firstName = parts[0] || '';
    lastName = parts.slice(1).join(' ') || '';
  }

  // Generate initials
  const initials = [firstName, lastName]
    .filter(name => name.length > 0)
    .map(name => name.charAt(0).toUpperCase())
    .join('');

  // Different display formats
  const displayName = fullName || 'Customer';
  const professionalName = fullName || `Customer (${user.email || 'No Email'})`;

  return {
    full: fullName,
    first: firstName,
    last: lastName,
    initials: initials || 'C',
    display: displayName,
    professional: professionalName,
    hasRealName: !!(firstName && lastName)
  };
};

/**
 * Formats customer contact information for invoices
 * @param {Object} user - The user object from Supabase
 * @returns {Object} - Formatted contact information
 */
export const formatCustomerContact = (user) => {
  if (!user) {
    return {
      name: 'Customer',
      email: 'customer@example.com',
      company: 'Customer Organization',
      id: 'GUEST',
      hasComplete: false
    };
  }

  const nameInfo = formatCustomerName(user);
  const company = user.user_metadata?.company ? 
    toTitleCase(user.user_metadata.company.trim()) : 
    null;

  return {
    name: nameInfo.professional,
    email: user.email || 'No Email Provided',
    company: company || null,
    id: user.id?.slice(-8)?.toUpperCase() || 'UNKNOWN',
    hasComplete: nameInfo.hasRealName && !!user.email
  };
};

/**
 * Formats name for report attribution
 * @param {Object} user - The user object from Supabase
 * @returns {string} - Formatted attribution line
 */
export const formatReportAttribution = (user) => {
  if (!user) {
    return 'Generated by CloudBucks User';
  }

  const nameInfo = formatCustomerName(user);
  const email = user.email || 'No Email';
  
  return `Generated for: ${nameInfo.display} (${email})`;
};

/**
 * Validates if a user has sufficient information for professional documents
 * @param {Object} user - The user object from Supabase
 * @returns {Object} - Validation result with details
 */
export const validateUserForDocuments = (user) => {
  if (!user) {
    return {
      isValid: false,
      issues: ['No user account'],
      recommendations: ['Please sign up for an account']
    };
  }

  const issues = [];
  const recommendations = [];
  const nameInfo = formatCustomerName(user);

  if (!nameInfo.hasRealName) {
    issues.push('Name information incomplete');
    recommendations.push('Please update your profile with your full name');
  }

  if (!user.email) {
    issues.push('No email address');
    recommendations.push('Please verify your email address');
  }

  return {
    isValid: issues.length === 0,
    issues,
    recommendations,
    user: nameInfo
  };
};

export default {
  formatCustomerName,
  formatCustomerContact,
  formatReportAttribution,
  validateUserForDocuments,
  toTitleCase
}; 